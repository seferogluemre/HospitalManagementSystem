// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider               = "prisma-client-js"
  output                 = "./client"
  runtime                = "bun"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

generator prismabox {
  provider                    = "prismabox"
  // you can optionally specify the output location. Defaults to ./prismabox
  output                      = "./prismabox"
  // if you want, you can customize the imported variable name that is used for the schemes. Defaults to "Type" which is what the standard typebox package offers
  typeboxImportVariableName   = "t"
  // you also can specify the dependency from which the above import should happen. This is useful if a package re-exports the typebox package and you would like to use that
  typeboxImportDependencyName = "elysia"
  // by default the generated schemes do not allow additional properties. You can allow them by setting this to true
  // additionalProperties        = true
  // optionally enable the data model generation. See the data model section below for more info
  inputModel                  = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Role {
  ADMIN
  SECRETARY
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  PENDING
}

// MODELS

// Central User Model for Authentication and basic info
model User {
  id String @id @default(cuid())
  /// @prismabox.options{minLength: 2, maxLength: 50}
  firstName String
  /// @prismabox.options{minLength: 2, maxLength: 50}
  lastName      String
  email         String   @unique
  hashedPassword String?
  phone         String?
  role          Role
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Role-specific profiles (One-to-One)
  doctorProfile    DoctorProfile?
  patientProfile   PatientProfile?
  secretaryProfile SecretaryProfile?

  // A user can create many announcements
  createdAnnouncements Announcement[]

  @@index([deletedAt])
  @@map("users")
}

// Doctor-specific details
model DoctorProfile {
  id String @id @default(cuid())
  userId           String      @unique
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// @prismabox.options{maxLength: 100}
  registrationNumber String      @unique // Sicil NumarasÄ±
  bio              String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // A doctor can have many specialties (Many-to-Many)
  specialties      Specialty[] @relation("DoctorSpecialties")

  // A doctor can have many appointments
  appointments     Appointment[]

  @@index([deletedAt])
  @@map("doctor_profiles")
}

// Patient-specific details
model PatientProfile {
  id String @id @default(cuid())
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bloodType    String?
  medicalNotes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // A patient can have many appointments
  appointments Appointment[]

  @@index([deletedAt])
  @@map("patient_profiles")
}

// Secretary-specific details
model SecretaryProfile {
  id       String @id @default(cuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  officeNumber String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@map("secretary_profiles")
}

// Medical Specialties (Branches)
model Specialty {
  id String @id @default(cuid())
  /// @prismabox.options{minLength: 2, maxLength: 100}
  name        String   @unique
  description String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // Many doctors can belong to this specialty (Many-to-Many)
  doctors     DoctorProfile[] @relation("DoctorSpecialties")

  @@index([deletedAt])
  @@map("specialties")
}

// Appointments table
model Appointment {
  id              String            @id @default(cuid())
  appointmentDate DateTime
  status          AppointmentStatus @default(SCHEDULED)
  notes           String?
  
  patientId       String
  patient         PatientProfile    @relation(fields: [patientId], references: [id])
  
  doctorId        String
  doctor          DoctorProfile     @relation(fields: [doctorId], references: [id])
  
  // An appointment can lead to a treatment
  treatment       Treatment?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([deletedAt])
  @@index([status])
  @@index([doctorId, appointmentDate])
  @@map("appointments")
}

// Treatment as a result of an appointment
model Treatment {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  description   String
  cost          Decimal?
  
  // A treatment can have one prescription
  prescription  Prescription?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("treatments")
}

// Prescription linked to a treatment
model Prescription {
  id          String   @id @default(cuid())
  treatmentId String   @unique
  treatment   Treatment @relation(fields: [treatmentId], references: [id])
  notes       String?
  
  // A prescription can have multiple medication items
  items       PrescriptionItem[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("prescriptions")
}

// Individual medication item in a prescription
model PrescriptionItem {
  id             String       @id @default(cuid())
  prescriptionId String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
  /// @prismabox.options{maxLength: 255}
  medicationName String
  /// @prismabox.options{maxLength: 100}
  dosage         String // e.g., "500mg"
  /// @prismabox.options{maxLength: 100}
  frequency      String // e.g., "Twice a day"
  /// @prismabox.options{maxLength: 100}
  duration       String // e.g., "7 days"

  @@map("prescription_items")
}

// Announcements
model Announcement {
  id String @id @default(cuid())
  /// @prismabox.options{minLength: 3, maxLength: 255}
  title     String
  content   String
  
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("announcements")
}
